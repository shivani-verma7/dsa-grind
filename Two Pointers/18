class Solution {
private:
    string genHash(int a,int b,int c,int d){
        return to_string(a)+" "+to_string(b)+" "+to_string(c)+" "+to_string(d);
    }
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> sol;
        if(nums.size()<4)
            return sol;
        sort(nums.begin(), nums.end());
        unordered_map<string,int> mp;
        for(int i=0;i<nums.size()-3;i++){
            for(int j=i+1;j<nums.size()-2;j++){
                int k = j+1, l = nums.size()-1;
                while(k<l){
                    long sum = (long)nums[i]+(long)nums[j]+(long)nums[k]+(long)nums[l];
                    if(sum > target)
                        l--;
                    else if(sum < target)
                        k++;
                    else{
                        string hash = genHash(nums[i],nums[j],nums[k],nums[l]);
                        if(mp.find(hash)==mp.end()){
                            mp[hash]=1;
                            vector<int> temp = {nums[i],nums[j],nums[k],nums[l]};
                            sol.push_back(temp);
                        }
                        l--;
                        k++;
                    }
                }
            }
        }
        return sol;
    }
};