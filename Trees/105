/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    TreeNode* build(unordered_map<int,int> &mp, vector<int> &pre, int &pos, int start, int end)
    {
        if(pos>pre.size()||start>end)
            return NULL;
        TreeNode *T = new TreeNode(pre[pos]);
        int posIn = mp[pre[pos]];
        pos++;
        T->left = build(mp, pre, pos, start, posIn-1);
        T->right = build(mp, pre, pos, posIn+1, end);
        return T;
    }
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        unordered_map<int,int> mp;
        for(int i=0;i<inorder.size();i++){
            mp[inorder[i]]=i;
        }
        int pos=0, start=0, end=inorder.size()-1;
        return build(mp,preorder,pos,start,end);
    }
};
/*
Time complexity = O(n)
Space complexity = O(n)
*/