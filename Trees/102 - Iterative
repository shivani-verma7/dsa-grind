/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        queue<TreeNode*> q;
        vector<vector<int>> ans;
        if(!root)
            return ans;
        q.push(root);
        q.push(NULL);
        int level=0;
        while(q.size()>0){
            TreeNode* T=q.front();
            q.pop();
            if(T==NULL && q.size()>0){
                level++;
                q.push(T);
                continue;
            }
            else if(T==NULL)
                break;
            if(ans.size()<level+1){
                vector<int> v = {T->val};
                ans.push_back(v);
            }
            else{
                ans[level].push_back(T->val);
            }
            if(T->left)
                q.push(T->left);
            if(T->right)
                q.push(T->right);
        }
        return ans;
    }
};

/*
Time complexity = O(n)
Space complexity = O(n)
*/