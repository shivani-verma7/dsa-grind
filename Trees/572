/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    string inOrder(TreeNode *P){
        if(!P)
            return ".";
        return "_"+to_string(P->val)+" "+inOrder(P->left)+" "+inOrder(P->right);
    }
public:
    bool isSubtree(TreeNode* root, TreeNode* subRoot) {
        string s1 = inOrder(root), s2 = inOrder(subRoot);
        return s1.find(s2)!=string::npos;
    }
};

/*
Time complexity = O(n)
Space complexity = O(n)
*/