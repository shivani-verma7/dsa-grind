class Solution
{
public:
    string longestPalindrome(string s)
    {
        vector<vector<int>> isPalindrome(s.length(), vector<int>(s.length(), 0));
        int len, i, j, start, end;
        for (len = 1; len <= s.length(); len++)
        {
            i = 0;
            j = len - 1;
            while (j < s.length())
            {
                if (i == j)
                    isPalindrome[i][j] = 1;
                else if (i == j - 1)
                {
                    if (s[i] == s[j])
                        isPalindrome[i][j] = 1;
                }
                else if (s[i] == s[j] && isPalindrome[i + 1][j - 1])
                    isPalindrome[i][j] = 1;
                if (isPalindrome[i][j])
                {
                    start = i;
                    end = j;
                }
                i++;
                j++;
            }
        }
        return s.substr(start, end - start + 1);
    }
};
/*
Time complexity = O(n^2)
Space complexity = O(n^2)
*/