class Solution {
private:
    int isClosed(vector<vector<int>>& grid, int i, int j, int m, int n){
        if(i<0||j<0||i>=m||j>=n)
            return 0;
        if(grid[i][j]!=0)
            return 1;
        grid[i][j]=2;
        int top = isClosed(grid,i-1,j,m,n);
        int left = isClosed(grid,i,j-1,m,n);
        int bottom = isClosed(grid,i+1,j,m,n);
        int right = isClosed(grid,i,j+1,m,n);
        if(top && left && bottom && right)
            return 1;
        return 0;
    }
public:
    int closedIsland(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size(), count = 0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==0){
                    count += isClosed(grid,i,j,m,n);
                }
            }
        }
        return count;
    }
};