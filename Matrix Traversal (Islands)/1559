class Solution {
private:
    bool detectCycle(vector<vector<char>>& grid, vector<vector<int>>& vis,int i, int j, int pi, int pj, int m, int n){
        if(vis[i][j])
            return true;
        vis[i][j]=1;
        vector<vector<int>> coords = {{-1,0},{1,0},{0,-1},{0,1}};
        for(int k=0;k<coords.size();k++){
            int x = i+coords[k][0], y = j+coords[k][1];
            if(!(x==pi && y==pj)){
                if(x>=0 && x<m && y>=0 && y<n && grid[i][j]==grid[x][y]){
                    bool temp = detectCycle(grid,vis,x,y,i,j,m,n);
                    if(temp)
                        return true;
                }
            }
        }
        return false;
    }
public:
    bool containsCycle(vector<vector<char>>& grid) {
        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> vis(m,vector<int>(n,0));
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(!vis[i][j]){
                    bool hasCycle = detectCycle(grid,vis,i,j,-1,-1,m,n);
                    if(hasCycle)
                        return true;
                }
            }
        }
        return false;
    }
};